name: Dependent Workflow

on:
  workflow_run:
    workflows: ["Triggering Workflow 1", "Triggering Workflow 2"]
    types:
      - completed

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore status1 file from Workflow 1
        uses: actions/cache@v3
        with:
          path: status1.txt
          key: ${{ runner.os }}-workflow1-status
      - name: Check if status file exists
        run: |
          if [ -f status1.txt ]; then
            echo "status.txt exists"
          else
            echo "status.txt does not exist"
            exit 1
      - name: Restore status2 file from Workflow 2
        uses: actions/cache@v3
        with:
          path: status2.txt
          key: ${{ runner.os }}-workflow2-status
      - name: Check if status2 file exists
        run: |
          if [ -f status2.txt ]; then
            echo "status2.txt exists"
          else
            echo "status2.txt does not exist"
            exit 1
      - name: Check status file
        id: check_status
        run: |
          if grep -q "workflow1=completed" status1.txt && grep -q "workflow2=completed" status2.txt; then
            echo "Both workflows completed"
            echo "::set-output name=status::success"
          else
            echo "Waiting for both workflows to complete"
            exit 1
      - name: Run dependent steps
        if: steps.check_status.outputs.status == 'success'
        run: echo "Running dependent steps"
      - name: Clear cache
        if: steps.check_status.outputs.status == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const cacheKey1 = '${{ runner.os }}-workflow1-status';
            const cacheKey2 = '${{ runner.os }}-workflow2-status';
            const cacheList = await github.rest.actions.listRepoCaches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const cache of cacheList.data.actions_caches) {
              if (cache.key === cacheKey1 || cache.key === cacheKey2) {
                await github.rest.actions.deleteRepoCache({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
              }
            }
